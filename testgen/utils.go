package testgen

import (
	"errors"
	"bytes"
	"fmt"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/rlp"
	"github.com/ethereum/go-ethereum/rpc"
)

func checkHeaderRLP(t *T, n uint64, got []byte) error {
	head := t.chain.GetHeaderByNumber(n)
	if head == nil {
		return fmt.Errorf("unable to load block %d from test chain", n)
	}
	want, err := rlp.EncodeToBytes(head)
	if err != nil {
		return err
	}
	if hexutil.Encode(got) != hexutil.Encode(want) {
		return fmt.Errorf("unexpected response (got: %s, want: %s)", got, hexutil.Bytes(want))
	}
	return nil
}

func checkBlockRLP(t *T, n uint64, got []byte) error {
	head := t.chain.GetBlockByNumber(n)
	if head == nil {
		return fmt.Errorf("unable to load block %d from test chain", n)
	}
	want, err := rlp.EncodeToBytes(head)
	if err != nil {
		return err
	}
	if hexutil.Encode(got) != hexutil.Encode(want) {
		return fmt.Errorf("unexpected response (got: %s, want: %s)", got, hexutil.Bytes(want))
	}
	return nil
}

// I guess Go doesn't have uint256 type?
func checkBlockNumber(value hexutil.Uint64, expected hexutil.Uint64) error {
	if value != expected {
		return fmt.Errorf("unexpected block number value(have: %d, want: %d)", value, expected)
	}
	return nil
}

func checkBlockHash(value common.Hash, expected common.Hash) error {
	if value != expected {
		return fmt.Errorf("unexpected block hash value(have: %s, want: %s)", value.Hex(), expected.Hex())
	}
	return nil
}

func checkStatus(value hexutil.Uint64, expected hexutil.Uint64) error {
	if value != expected {
		return fmt.Errorf("expected status (have: %d, want: %d)", value, expected)
	}
	return nil
}

func checkError(err error, expectedErrorCode int) error {
	var ec rpc.Error
	if !errors.As(err, &ec) {
		return fmt.Errorf("expected error (have: some other output, want: %d)", expectedErrorCode)
	}
	if errors.As(err, &ec) && ec.ErrorCode() != expectedErrorCode {
		return fmt.Errorf("expected error (have: %d, want: %d)", ec.ErrorCode(), expectedErrorCode)
	}
	return nil
}

func blockHashCallerByteCode() *hexutil.Bytes {
	//Solidity code:
	//contract blockHashCaller {
	//	function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {
	//		blockHash = blockhash(blockNumber);
	//	}
	//}
	return hex2Bytes("6080604052348015600f57600080fd5b506004361060285760003560e01c8063ee82ac5e14602d575b600080fd5b60436004803603810190603f91906098565b6057565b604051604e919060d7565b60405180910390f35b600081409050919050565b600080fd5b6000819050919050565b6078816067565b8114608257600080fd5b50565b6000813590506092816071565b92915050565b60006020828403121560ab5760aa6062565b5b600060b7848285016085565b91505092915050565b6000819050919050565b60d18160c0565b82525050565b600060208201905060ea600083018460ca565b9291505056fea2646970667358221220a4d7face162688805e99e86526524ac3dadfb01cc29366d0d68b70dadcf01afe64736f6c63430008120033")
}

func selfDestructor() *hexutil.Bytes {
	//Solidity code:
	//contract SelfDestructor {
	//	function destroy() public {
	//		selfdestruct(payable(0x0));
	//	}
	//}
	return hex2Bytes("6080604052348015600f57600080fd5b506004361060285760003560e01c806383197ef014602d575b600080fd5b60336035565b005b600073ffffffffffffffffffffffffffffffffffffffff16fffea26469706673582212208e566fde20a17fff9658b9b1db37e27876fd8934ccf9b2aa308cabd37698681f64736f6c63430008120033")
}

func getCode() *hexutil.Bytes {
	//library GetCode {
	//	function at(address addr) public view returns (bytes memory code) {
	//		assembly {
	//			// retrieve the size of the code, this needs assembly
	//			let size := extcodesize(addr)
	//			// allocate output byte array - this could also be done without assembly
	//			// by using code = new bytes(size)
	//			code := mload(0x40)
	//			// new "memory end" including padding
	//			mstore(0x40, add(code, and(add(add(size, 0x20), 0x1f), not(0x1f))))
	//			// store length in memory
	//			mstore(code, size)
	//			// actually retrieve the code, this needs assembly
	//			extcodecopy(addr, add(code, 0x20), 0, size)
	//		}
	//	}
	//}
	return hex2Bytes("73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063dce4a4471461003a575b600080fd5b610054600480360381019061004f91906100f8565b61006a565b60405161006191906101b5565b60405180910390f35b6060813b6040519150601f19601f602083010116820160405280825280600060208401853c50919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100c58261009a565b9050919050565b6100d5816100ba565b81146100e057600080fd5b50565b6000813590506100f2816100cc565b92915050565b60006020828403121561010e5761010d610095565b5b600061011c848285016100e3565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561015f578082015181840152602081019050610144565b60008484015250505050565b6000601f19601f8301169050919050565b600061018782610125565b6101918185610130565b93506101a1818560208601610141565b6101aa8161016b565b840191505092915050565b600060208201905081810360008301526101cf818461017c565b90509291505056fea26469706673582212206a5f0cd9f230619fa520fc4b9d4b518643258cad412f2fa33945ce528b4b895164736f6c63430008120033")
}
func gasSpender() *hexutil.Bytes {
	//contract GasSpender {
	//	function spendGas(gasToSpend: uint) view external {
	//		uint public gasLeftInitially = gasleft();
	//		while(true) {
	//			if (gasLeftInitially - gasleft() >= gasToSpend) return;
	//		}
	//	}
	//}
	return hex2Bytes("608060405234801561001057600080fd5b506004361061002b5760003560e01c8063815b8ab414610030575b600080fd5b61004a600480360381019061004591906100b6565b61004c565b005b60005a90505b60011561007657815a826100669190610112565b106100715750610078565b610052565b505b50565b600080fd5b6000819050919050565b61009381610080565b811461009e57600080fd5b50565b6000813590506100b08161008a565b92915050565b6000602082840312156100cc576100cb61007b565b5b60006100da848285016100a1565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061011d82610080565b915061012883610080565b92508282039050818111156101405761013f6100e3565b5b9291505056fea2646970667358221220a659ba4db729a6ee4db02fcc5c1118db53246b0e5e686534fc9add6f2e93faec64736f6c63430008120033")
}

func getRevertingContract() *hexutil.Bytes {
	//contract RevertingContract {
	//	fallback() payable external {
	//		require(false, "Always reverting contract");
	//	}
	//}
	return hex2Bytes("608060405260006042576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401603990609d565b60405180910390fd5b005b600082825260208201905092915050565b7f416c7761797320726576657274696e6720636f6e747261637400000000000000600082015250565b600060896019836044565b91506092826055565b602082019050919050565b6000602082019050818103600083015260b481607e565b905091905056fea264697066735822122005cbbbc709291f66fadc17416c1b0ed4d72941840db11468a21b8e1a0362024c64736f6c63430008120033")
}

func getEthForwarder() *hexutil.Bytes {
	//contract EthForwarder {
	//	function execute(address payable forwardTo) payable external {
	//		bool sent = forwardTo.send(msg.value);
	//		require(sent, "Failed to send Ether");
	//	}
	//}
	return hex2Bytes("60806040526004361061001e5760003560e01c80634b64e49214610023575b600080fd5b61003d6004803603810190610038919061011f565b61003f565b005b60008173ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050509050806100b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100af906101a9565b60405180910390fd5b5050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ec826100c1565b9050919050565b6100fc816100e1565b811461010757600080fd5b50565b600081359050610119816100f3565b92915050565b600060208284031215610135576101346100bc565b5b60006101438482850161010a565b91505092915050565b600082825260208201905092915050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b600061019360148361014c565b915061019e8261015d565b602082019050919050565b600060208201905081810360008301526101c281610186565b905091905056fea2646970667358221220563acd6f5b8ad06a3faf5c27fddd0ecbc198408b99290ce50d15c2cf7043694964736f6c63430008120033")
}

func getEcRecoverOverride() *hexutil.Bytes {
	/*
		pragma solidity ^0.8.18;

		contract ecRecoverOverride {
		    struct EcRecoverOverrideParams {
		        bytes32 hash;
		        uint8 v;
		        bytes32 r;
		        bytes32 s;
		        address returnAddress;
		    }
		    mapping(bytes32 => address) overrideToAddress;

		    function setOverrides(EcRecoverOverrideParams[] memory overrides) public {
		        for (uint i = 0; i < overrides.length; i++) {
		            setOverride(overrides[i].hash, overrides[i].v, overrides[i].r, overrides[i].s, overrides[i].returnAddress);
		        }
		    }
		    fallback (bytes calldata input) external returns (bytes memory) {
		        (bytes32 hash, uint8 v, bytes32 r, bytes32 s) = abi.decode(input, (bytes32, uint8, bytes32, bytes32));
		        address overridedAddress = overrideToAddress[keccak256(abi.encodePacked(hash, v, r, s))];
		        if (overridedAddress == address(0x0)) {
		            (bool success, bytes memory data) = address(0x0000000000000000000000000000000000123456).call{gas: 10000}(input);
		            require(success, 'failed to call moved ecrecover at address 0x0000000000000000000000000000000000123456');
		            return data;
		        } else {
		            return abi.encodePacked(overridedAddress);
		        }
		    }
		}
	*/
	return hex2Bytes("608060405234801561001057600080fd5b506004361061003a5760003560e01c806305fdbc81146101ee578063c00692601461020a5761003b565b5b600036606060008060008086868101906100559190610462565b93509350935093506000806000868686866040516020016100799493929190610520565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101bb576000806212345673ffffffffffffffffffffffffffffffffffffffff166127108b8b6040516101249291906105ad565b60006040518083038160008787f1925050503d8060008114610162576040519150601f19603f3d011682016040523d82523d6000602084013e610167565b606091505b5091509150816101ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a39061066f565b60405180910390fd5b809750505050505050506101e3565b806040516020016101cc9190610709565b604051602081830303815290604052955050505050505b915050805190602001f35b6102086004803603810190610203919061093a565b610226565b005b610224600480360381019061021f9190610983565b6102ec565b005b60005b81518110156102e8576102d5828281518110610248576102476109fe565b5b602002602001015160000151838381518110610267576102666109fe565b5b602002602001015160200151848481518110610286576102856109fe565b5b6020026020010151604001518585815181106102a5576102a46109fe565b5b6020026020010151606001518686815181106102c4576102c36109fe565b5b6020026020010151608001516102ec565b80806102e090610a66565b915050610229565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361035b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035290610afa565b60405180910390fd5b80600080878787876040516020016103769493929190610520565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610406816103f3565b811461041157600080fd5b50565b600081359050610423816103fd565b92915050565b600060ff82169050919050565b61043f81610429565b811461044a57600080fd5b50565b60008135905061045c81610436565b92915050565b6000806000806080858703121561047c5761047b6103e9565b5b600061048a87828801610414565b945050602061049b8782880161044d565b93505060406104ac87828801610414565b92505060606104bd87828801610414565b91505092959194509250565b6000819050919050565b6104e46104df826103f3565b6104c9565b82525050565b60008160f81b9050919050565b6000610502826104ea565b9050919050565b61051a61051582610429565b6104f7565b82525050565b600061052c82876104d3565b60208201915061053c8286610509565b60018201915061054c82856104d3565b60208201915061055c82846104d3565b60208201915081905095945050505050565b600081905092915050565b82818337600083830152505050565b6000610594838561056e565b93506105a1838584610579565b82840190509392505050565b60006105ba828486610588565b91508190509392505050565b600082825260208201905092915050565b7f6661696c656420746f2063616c6c206d6f7665642065637265636f766572206160008201527f742061646472657373203078303030303030303030303030303030303030303060208201527f3030303030303030303030303030313233343536000000000000000000000000604082015250565b60006106596054836105c6565b9150610664826105d7565b606082019050919050565b600060208201905081810360008301526106888161064c565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106ba8261068f565b9050919050565b60008160601b9050919050565b60006106d9826106c1565b9050919050565b60006106eb826106ce565b9050919050565b6107036106fe826106af565b6106e0565b82525050565b600061071582846106f2565b60148201915081905092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61077282610729565b810181811067ffffffffffffffff821117156107915761079061073a565b5b80604052505050565b60006107a46103df565b90506107b08282610769565b919050565b600067ffffffffffffffff8211156107d0576107cf61073a565b5b602082029050602081019050919050565b600080fd5b600080fd5b6107f4816106af565b81146107ff57600080fd5b50565b600081359050610811816107eb565b92915050565b600060a0828403121561082d5761082c6107e6565b5b61083760a061079a565b9050600061084784828501610414565b600083015250602061085b8482850161044d565b602083015250604061086f84828501610414565b604083015250606061088384828501610414565b606083015250608061089784828501610802565b60808301525092915050565b60006108b66108b1846107b5565b61079a565b90508083825260208201905060a084028301858111156108d9576108d86107e1565b5b835b8181101561090257806108ee8882610817565b84526020840193505060a0810190506108db565b5050509392505050565b600082601f83011261092157610920610724565b5b81356109318482602086016108a3565b91505092915050565b6000602082840312156109505761094f6103e9565b5b600082013567ffffffffffffffff81111561096e5761096d6103ee565b5b61097a8482850161090c565b91505092915050565b600080600080600060a0868803121561099f5761099e6103e9565b5b60006109ad88828901610414565b95505060206109be8882890161044d565b94505060406109cf88828901610414565b93505060606109e088828901610414565b92505060806109f188828901610802565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000610a7182610a5c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610aa357610aa2610a2d565b5b600182019050919050565b7f72657475726e20616464726573732063616e6e6f742062652030783000000000600082015250565b6000610ae4601c836105c6565b9150610aef82610aae565b602082019050919050565b60006020820190508181036000830152610b1381610ad7565b905091905056fea2646970667358221220154f5b68ccfa5be744e7245765a3530dac4035052284a68b5dded1945b45075e64736f6c63430008120033")
}

func getBalanceGetter() *hexutil.Bytes {
	/*
		pragma solidity ^0.8.18;

		contract BalanceGetter {
		    function getBalance(address addr) view external returns (uint256) {
		        return address(addr).balance;
		    }
		}
	*/
	return hex2Bytes("608060405234801561001057600080fd5b506004361061002b5760003560e01c8063f8b2cb4f14610030575b600080fd5b61004a600480360381019061004591906100e4565b610060565b604051610057919061012a565b60405180910390f35b60008173ffffffffffffffffffffffffffffffffffffffff16319050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100b182610086565b9050919050565b6100c1816100a6565b81146100cc57600080fd5b50565b6000813590506100de816100b8565b92915050565b6000602082840312156100fa576100f9610081565b5b6000610108848285016100cf565b91505092915050565b6000819050919050565b61012481610111565b82525050565b600060208201905061013f600083018461011b565b9291505056fea2646970667358221220172c443a163d8a43e018c339d1b749c312c94b6de22835953d960985daf228c764736f6c63430008120033")
}

func getEcRecoverCaller() *hexutil.Bytes {
	/*
		contract EcRecoverCaller {
			function callEcRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) pure external returns (address) {
				return ecrecover(hash, v, r, s);
			}
		}
	*/
	return hex2Bytes("608060405234801561001057600080fd5b506004361061002b5760003560e01c8063265dc68c14610030575b600080fd5b61004a6004803603810190610045919061012f565b610060565b60405161005791906101d7565b60405180910390f35b6000600185858585604051600081526020016040526040516100859493929190610210565b6020604051602081039080840390855afa1580156100a7573d6000803e3d6000fd5b505050602060405103519050949350505050565b600080fd5b6000819050919050565b6100d3816100c0565b81146100de57600080fd5b50565b6000813590506100f0816100ca565b92915050565b600060ff82169050919050565b61010c816100f6565b811461011757600080fd5b50565b60008135905061012981610103565b92915050565b60008060008060808587031215610149576101486100bb565b5b6000610157878288016100e1565b94505060206101688782880161011a565b9350506040610179878288016100e1565b925050606061018a878288016100e1565b91505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101c182610196565b9050919050565b6101d1816101b6565b82525050565b60006020820190506101ec60008301846101c8565b92915050565b6101fb816100c0565b82525050565b61020a816100f6565b82525050565b600060808201905061022560008301876101f2565b6102326020830186610201565b61023f60408301856101f2565b61024c60608301846101f2565b9594505050505056fea26469706673582212206c520c25fdd1108030611d622b1aa1038ff1b4820f27608d6867d249c1e3ed7664736f6c63430008120033")
}

func getStorageTester() *hexutil.Bytes {
	/*
		pragma solidity ^0.8.18;

		contract StorageTester {
		    uint256 public value0;
		    uint256 public value1;

		    function setValue(uint256 slot, uint256 value) external {
		        require(slot < 2, "too big slot");
		        if (slot == 0) { value0 = value; return; }
		        if (slot == 1) { value1 = value; return; }
		    }
		    function getValue(uint256 slot) view external returns (uint256 ReturnData) {
		        require(slot < 2, "too big slot");
		        if (slot == 0) { ReturnData = value0; }
		        if (slot == 1) { ReturnData = value1; }
		    }
		}
	*/
	return hex2Bytes("608060405234801561001057600080fd5b506004361061004c5760003560e01c80630ff4c916146100515780633033413b1461008157806344e12f871461009f5780637b8d56e3146100bd575b600080fd5b61006b600480360381019061006691906101f6565b6100d9565b6040516100789190610232565b60405180910390f35b61008961013f565b6040516100969190610232565b60405180910390f35b6100a7610145565b6040516100b49190610232565b60405180910390f35b6100d760048036038101906100d2919061024d565b61014b565b005b60006002821061011e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610115906102ea565b60405180910390fd5b6000820361012c5760005490505b6001820361013a5760015490505b919050565b60015481565b60005481565b6002821061018e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610185906102ea565b60405180910390fd5b600082036101a257806000819055506101b7565b600182036101b657806001819055506101b7565b5b5050565b600080fd5b6000819050919050565b6101d3816101c0565b81146101de57600080fd5b50565b6000813590506101f0816101ca565b92915050565b60006020828403121561020c5761020b6101bb565b5b600061021a848285016101e1565b91505092915050565b61022c816101c0565b82525050565b60006020820190506102476000830184610223565b92915050565b60008060408385031215610264576102636101bb565b5b6000610272858286016101e1565b9250506020610283858286016101e1565b9150509250929050565b600082825260208201905092915050565b7f746f6f2062696720736c6f740000000000000000000000000000000000000000600082015250565b60006102d4600c8361028d565b91506102df8261029e565b602082019050919050565b60006020820190508181036000830152610303816102c7565b905091905056fea2646970667358221220ceea194bb66b5b9f52c83e5bf5a1989255de8cb7157838eff98f970c3a04cb3064736f6c63430008120033")
}

func getBlockProperties() *hexutil.Bytes {
	/*
		pragma solidity ^0.8.18;
		contract blockProperties {
			 fallback (bytes calldata input) external returns (bytes memory) {
				return abi.encode(
					block.basefee,
					block.chainid,
					block.coinbase,
					block.difficulty,
					block.gaslimit,
					block.number,
					block.timestamp,
					gasleft(),
					tx.gasprice,
					blockhash(block.number - 1)
				);
			}
		}
	*/
	return hex2Bytes("608060405234801561001057600080fd5b506000366060484641444543425a3a60014361002c919061009b565b406040516020016100469a99989796959493929190610138565b6040516020818303038152906040529050915050805190602001f35b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006100a682610062565b91506100b183610062565b92508282039050818111156100c9576100c861006c565b5b92915050565b6100d881610062565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610109826100de565b9050919050565b610119816100fe565b82525050565b6000819050919050565b6101328161011f565b82525050565b60006101408201905061014e600083018d6100cf565b61015b602083018c6100cf565b610168604083018b610110565b610175606083018a6100cf565b61018260808301896100cf565b61018f60a08301886100cf565b61019c60c08301876100cf565b6101a960e08301866100cf565b6101b76101008301856100cf565b6101c5610120830184610129565b9b9a505050505050505050505056fea26469706673582212205139ae3ba8d46d11c29815d001b725f9840c90e330884ed070958d5af4813d8764736f6c63430008120033")
}

func getUint64Ptr(value hexutil.Uint64) *hexutil.Uint64 {
	newUint64 := new(hexutil.Uint64)
	newUint64 = &value
	return newUint64
}
func checkBlockReceipts(t *T, n uint64, got []*types.Receipt) error {
	b := t.chain.GetBlockByNumber(n)
	if b == nil {
		return fmt.Errorf("block number %d not found", n)
	}
	want := t.chain.GetReceiptsByHash(b.Hash())
	if len(got) != len(want) {
		return fmt.Errorf("receipts length mismatch (got: %d, want: %d)", len(got), len(want))
	}
	for i := range got {
		got, _ := got[i].MarshalBinary()
		want, _ := want[i].MarshalBinary()
		if !bytes.Equal(got, want) {
			return fmt.Errorf("receipt %d mismatch (got: %x, want: %x)", i, got, want)
		}
	}
	return nil
}
